// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import "./libs/shim/expect.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    App_url: "https://app.qa.az.memcrypt.io",
    orgName: "Postman User Org",
    username: "Postmanuser",
    email: "arunkumar.n@appnetwise.com",
    firstName: "arun",
    lastName: "kumar",
    password: "password@123",
    Existingorgname: "",
    Existingusername: "tdjzt8f1fb6e3-c0f7-4978-8ogouhmyrtisujy",
    Existingemail:
      "3egthaddeush6bu941eeedb1-2097-4dbe-ajspmqcomleopold_conroy@gmail.com",
    ExistingfirstName: "Alejandra",
    ExistinglastName: "Raynor",
    AttributesStatus: "",
    Existingverificationcode: "",
    TenantId: "a3741784-ca33-4598-8bf6-926d0529c8c1",
    AdminUserId: "df30feaa-f441-462e-8c63-4ab56b751d98",
    invalidEmail: "arunkumar.n@ner",
    InvalidAdminUserId: "34565635654654654",
    customOrgName: "3ElCarroll-8wCOHHzcc989fd73-8014-417a-bYlH",
    customUsername: "tdJzt8f1fb6e3-c0f7-4978-8OGouhMyrtisUjY",
    customEmail:
      "3EgThaddeush6bU941eeedb1-2097-4dbe-aJSPMQcomLeopold_Conroy@gmail.com",
    Invalidverificationcode: "345436546546547657",
    AuthURL:
      "https://idp.qa.az.memcrypt.io/realms/memcrypt/protocol/openid-connect/auth",
    AccessTokenURL:
      "https://idp.qa.az.memcrypt.io/realms/memcrypt/protocol/openid-connect/token",
    ClientID: "memcrypt-qa-frontend",
    codeVerifier: "",
    codeChallenge: "",
    emailURL: "https://mail.qa.az.memcrypt.io",
    admin_token_expiration: 1732598588,
    admin_access_token:
      "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICItSldqbkdMdktZam9qVWVCbE1NaC1QeHpJUks3UFlxVTlESG96U3ZuTUVVIn0.eyJleHAiOjE3MzI1OTg1ODgsImlhdCI6MTczMjU5ODI4OCwianRpIjoiNzAzMDIzMmEtMmFiMy00ZjM3LWI4ZmItMjI0Yzg0YzA4ZjFmIiwiaXNzIjoiaHR0cHM6Ly9pZHAuc25ieC5hei5tZW1jcnlwdC5pby9yZWFsbXMvbWVtY3J5cHQtcWEiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMWIzYTcxMjktZTcxMS00ZGNkLWFhMjctZTNlNzM4MjgzNzMyIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibWVtY3J5cHQtcWEtZnJvbnRlbmQiLCJzaWQiOiI4MWQ3MzhlOS05MzA1LTRhZWQtYjFiMC1jMjE4ZmNlZWE4YjciLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHBzOi8vYXBwLnFhLmF6Lm1lbWNyeXB0LmlvIiwiaHR0cHM6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHBzOi8vb2F1dGgucHN0bW4uaW8iLCJodHRwOi8vbG9jYWxob3N0OjMwMDAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtbWVtY3J5cHQtcWEiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiUExBVEZPUk1fQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6InBsYXRmb3JtYWRtaW4iLCJlbWFpbCI6InBsYXRmb3JtYWRtaW5AZXhhbXBsZS5jb20ifQ.vz6dkAt84nBndAxDhCgFOwJN2x2jzqZRCv2gi6pBVK3ztphXljuGvGmDkPH4TnQ6XdlS4g41OTciDmTmmLAiyOaO2z9agJp88Ks9NqUm2EuEdEtER5Tt_wiAXh-I3j82oU5XGG_rYVkwvO1tXVdyH6t2TOiDxTXUZvPg_9qqDO8o5JF3o_B7XDsoCecX5pnaIiANJWuttoweN_0rwnULCI2sk75jZnWGfOTzuhd69HEmSXUUr3d8e_pMHbY4n2N8LIcVJepX07Rcu0bdf6zyz6KV8b4t3c1sP2pdo94xVBetyfnLl9j6dkSozBGthZftRpcL3priQnTpiiUe-regwA",
    admin_refresh_token:
      "eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI4YWEyNjRlMS1kYTFjLTRjNWQtYWE3My1iNDg5N2RmZTYyMGIifQ.eyJleHAiOjE3MzI2MDAwODgsImlhdCI6MTczMjU5ODI4OCwianRpIjoiMmZmOWFmYzktYTE3OS00YjMwLWE5NmQtYzhkZGRiZmNmYTU2IiwiaXNzIjoiaHR0cHM6Ly9pZHAuc25ieC5hei5tZW1jcnlwdC5pby9yZWFsbXMvbWVtY3J5cHQtcWEiLCJhdWQiOiJodHRwczovL2lkcC5zbmJ4LmF6Lm1lbWNyeXB0LmlvL3JlYWxtcy9tZW1jcnlwdC1xYSIsInN1YiI6IjFiM2E3MTI5LWU3MTEtNGRjZC1hYTI3LWUzZTczODI4MzczMiIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJtZW1jcnlwdC1xYS1mcm9udGVuZCIsInNpZCI6IjgxZDczOGU5LTkzMDUtNGFlZC1iMWIwLWMyMThmY2VlYThiNyIsInNjb3BlIjoib3BlbmlkIGJhc2ljIG9yZ19pZCBlbWFpbCBhY3Igcm9sZXMgd2ViLW9yaWdpbnMgcHJvZmlsZSJ9.GxeXt4CuaTr5TDXO6s3k3xNPANetH_X7ZhA-QoXzTayM8ry1bqzAipzBBAEakrteSc0kfYH6t3dXIp7e5mo4og",
    user_username: "test",
    user_password: "password@123",
    admin_username: "platformadmin",
    admin_password: "anw-mc-S@@S-qa777",
    user_token_expiration: "0",
    user_access_token: "dfghdghgf",
    user_refresh_token: "zdfgdfsgdfg",
    client_id: "memcrypt-qa-frontend",
    keycloak_url: "https://idp-admin.snbx.az.memcrypt.io",
    keycloak_access_token:
      "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICItSldqbkdMdktZam9qVWVCbE1NaC1QeHpJUks3UFlxVTlESG96U3ZuTUVVIn0.eyJleHAiOjE3Mjk2Nzc1MTYsImlhdCI6MTcyOTY3NzIxNiwianRpIjoiMjcwOTgzYjMtNTczMy00ZGUxLTlmNjQtZmZjN2E1ZmY1ZmQ2IiwiaXNzIjoiaHR0cHM6Ly9pZHAuc25ieC5hei5tZW1jcnlwdC5pby9yZWFsbXMvbWVtY3J5cHQtcWEiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiZTZlODUyNmQtMzU3Mi00YTI0LTgzM2ItMTI5ODgxM2ZmN2FlIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibWVtY3J5cHQtcWEtZnJvbnRlbmQiLCJzaWQiOiJlNjcxMzliYS1lMjBkLTQzNGUtODBhYS05OTM3Y2UzNmI2NzAiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHBzOi8vYXBwLnFhLmF6Lm1lbWNyeXB0LmlvIiwiaHR0cHM6Ly9hcGkucWEuYXoubWVtY3J5cHQuaW8iLCJodHRwczovL29hdXRoLnBzdG1uLmlvIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLW1lbWNyeXB0LXFhIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsIk9SR19BRE1JTiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwib3JnX2lkIjoiMTQ5Yzg2NGEtMzUwOS00NDAxLTkxZDgtZmZmMWExMmNhMzAxIiwibmFtZSI6IkpvZXNwaCBNdXJyYXkiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJsYmF4aTYxZWIwZGU1LWZlODctNGNjZS1iZnBjeXJtYWdkYWxlbmFoeGoiLCJnaXZlbl9uYW1lIjoiSm9lc3BoIiwiZmFtaWx5X25hbWUiOiJNdXJyYXkiLCJlbWFpbCI6InFmdGxpbm5lYWthb3d2NDQ1MGIzMTAtNTU5OS00ZGEyLTl4b3FzOGNvbWdpbmEuZ2F5bG9yZEB5YWhvby5jb20ifQ.fjRJywccxjzQ-SK4o8q96sUBW3Cka514yW_ego5R9s0ZDx__syEg8B6ItwmmEpNOOT-8x35ouPCLrd5PqTrsCMp2gmr0mOjxMQqxRBJUIzODtcDzacA9IyEAj7G-tuL0UBd9jQQw4vsyU8zOCg3kKvzILCl-akEKW6H5xs_OQdJ_TOAK5F0bGsizHwBLFhrfJ78B8zDU0A4seXhCCQlDwskVSQF5J85H93xkfgl0SbI5Nerw5TUD3DWOzwlcOo0R6_boqZtm_fzmySONDYyGoHti8wUXyYbtmSGHSubJBdsihwCBSEA8TLzaJ92AmdFXsVmhHLv-hpg3VZs5yF920g",
    realm: "memcrypt-qa",
    keycloak_clientId: "memcrypt-qa-backend",
    keycloak_secert: "0PDyH6TeXlb2gDG1KNNVR40HevwiMn1h",
    file_path: "",
    file_format: "",
    fileNames: "",
    singleFileName: "",
    deviceName: "HP dash LP",
    deviceType: "Laptop",
    deviceSerialNumber: 424248758,
    deviceIP: "172.26.176.1",
    deviceLocation: "Hyderabad",
    deviceID: "858b1fc7-dac6-4590-8f1c-b1ef887059c0",
    updatedDeviceIP: "172.26.176.12",
    zipfile: "",
    tarfile: "",
    exefile:
      "DetectEndpoint_sass_console_20241120112548_20241120121150_20241209073914.exe",
    fileuploadPath: "",
    secondDeviceName: "Apple Laptop",
    secondDeviceSerialNumber: 700276924,
    last_seen: "2024-10-10T11:40:01.630122Z",
    FileName: "",
    applicationName: "AppName-whkt9z",
    ApplicationId: "e2213ae9-5e51-4d75-a781-f82320f9ac50",
    Applicationname: "AppName-whkt9z",
    mailboxName: "qa@memcrypt.com",
    consoleUrl: "https://api.qa.az.memcrypt.io",
    agentBinaryUrl: "https://api.qa.az.memcrypt.io",
    memcryptLog_port: "8989",
    inventory_id: "af2681f8-c554-4723-8647-e54b2a5732b5",
    secondApplicationName: "AppName-2cwoyy",
    secondApplicationId: "b4bb5724-70f3-4855-96b3-272280d56250",
    secondApplicationname: "AppName-2cwoyy",
    currentTimestamp: "2024-11-06T12:28:44.828Z",
    recoveryFileUniqueID: 27,
    randomFirstName: "Alice",
    randomLastName: "Alice",
    latestEmailResponseId: "",
    hash: "",
    secondHash: "",
    agentbinaryfilename:
      "DetectEndpoint_sass_console_20241120112548_20241120121150.exe",
    DEVICE_ID_1: "",
    DEVICE_ID_2: "",
    TOTAL_DEVICES: "",
    CURRENT_DEVICE_INDEX: "",
    userIds: "",
    currentUserId: ""
  }
});

export default function() {
  group("AdminFlow", function() {
    group("TokenCall", function() {
      postman[Request]({
        name: "Get Admin Access Token",
        id: "2ca65867-1b23-4ab7-a929-e6104f834dde",
        method: "POST",
        address:
          "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
        data: {
          client_id: "{{client_id}}",
          grant_type: "password",
          username: "{{admin_username}}",
          password: "{{admin_password}}",
          "scope ": "openid"
        },
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });

          var jsonData = pm.response.json();

          var adminAccessToken = jsonData.access_token;

          pm.environment.set("admin_access_token", adminAccessToken);
        },
        auth(config, Var) {
          config.headers.Authorization = "Bearer undefined";
        }
      });
    });

    group("Create User", function() {
      postman[Request]({
        name: "New Request",
        id: "53bbd4b5-305f-41ff-b0b2-eaba6a041332",
        method: "POST",
        address: "{{App_url}}/api/auth/signup",
        data:
          '{\r\n    "orgName": "{{customOrgName}}",\r\n    "adminUser": {\r\n        "username": "{{customUsername}}",\r\n        "email": "{{customEmail}}",\r\n        "firstName": "{{randomFirstName}}",\r\n        "lastName": "{{randomLastName}}",\r\n        "password": "{{password}}"\r\n    }\r\n}',
        pre() {
          // Function to generate a random string of specified length
          function generateRandomString(length) {
            const chars =
              "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            let result = "";
            for (let i = 0; i < length; i++) {
              result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
          }

          function generateProfessionalSuffix(length) {
            const suffixes = ["Tech", "Soft", "Corp", "Dyn", "Sys"];
            return (
              suffixes[Math.floor(Math.random() * suffixes.length)] +
              generateRandomString(length - suffixes[0].length)
            );
          }
          // Function to generate a random first name
          function generateRandomFirstName() {
            const names = ["Alice", "Bob", "Charlie", "David", "Eve"];
            return names[Math.floor(Math.random() * names.length)];
          }

          // Function to generate a random company name
          function generateRandomCompanyName() {
            const companies = ["abc", "def", "xyz"];
            return companies[Math.floor(Math.random() * companies.length)];
          }

          // Function to generate a GUID
          function generateGuid() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
              /[xy]/g,
              function(c) {
                const r = (Math.random() * 16) | 0,
                  v = c === "x" ? r : (r & 0x3) | 0x8;
                return v.toString(16);
              }
            );
          }

          // Function to remove commas and spaces from a string
          function sanitizeString(str) {
            return str.replace(/[\s,]/g, ""); // Remove spaces and commas
          }

          let customOrgName = "api-" + generateProfessionalSuffix(6);
          console.log(customOrgName);

          // Sanitize the customOrgName to remove commas and spaces
          customOrgName = sanitizeString(customOrgName);

          if (customOrgName.length > 55) {
            customOrgName = customOrgName.substring(0, 55);
          }

          // Set the generated customOrgName into the Postman environment
          pm.environment.set("customOrgName", customOrgName);

          pm.environment.set("randomFirstName", generateRandomFirstName());

          pm.environment.set("randomLastName", generateRandomFirstName());
          // Generate a custom email in a valid format, ensuring it’s <= 75 characters
          let customEmail =
            "api-" +
            pm.environment.get("randomFirstName").toLowerCase() +
            "." +
            generateRandomString(5).toLowerCase() +
            "@" +
            generateRandomCompanyName() +
            ".com";

          // Ensure email length does not exceed 75 characters
          if (customEmail.length > 75) {
            customEmail = customEmail.substring(0, 75);
          }

          // Generate custom username, limited to 75 characters
          let customUsername = customEmail;

          // Set the generated values into Postman environment variables
          pm.environment.set("customOrgName", customOrgName);
          pm.environment.set("customUsername", customUsername);
          pm.environment.set("customEmail", customEmail);

          // Log the generated values to the console for verification
          console.log(
            "Custom Org Name (<= 55 chars, no commas or spaces):",
            customOrgName
          );
          console.log("Custom Username (<= 75 chars):", customUsername);
          console.log(
            "Custom Email (<= 75 chars, includes 'com'):",
            customEmail
          );
        },
        post(response) {
          pm.test("Status code is 201", function() {
            pm.response.to.have.status(201);
          });
          // Check that the status code is 201
          pm.test("Status code is 201", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(201);
          });

          // Check that the body includes the string "pending"
          pm.test("Body matches string 'pending'", function() {
            pm.expect(pm.response.text()).to.include("pending");
          });

          // Parse the response JSON
          var jsonData = pm.response.json();

          // Extract the id and email from the response
          var responsetenantId = jsonData.tenant.id;
          var responseadminuserid = jsonData.adminUser.id;
          var responseadminusername = jsonData.adminUser.username;
          var responseadminemail = jsonData.adminUser.email;
          var responseadminfirstname = jsonData.adminUser.firstName;
          var responseadminlastname = jsonData.adminUser.lastName;
          var responseadminattributesstatus =
            jsonData.adminUser.attributes.status;
          var responseadminverificationtoken =
            jsonData.adminUser.attributes.verificationToken;

          // Set the id and email as environment variables
          pm.environment.set("TenantId", responsetenantId);
          pm.environment.set("AdminUserId", responseadminuserid);
          pm.environment.set("user_username", responseadminusername);
          pm.environment.set("Existingusername", responseadminusername);
          pm.environment.set("Existingemail", responseadminemail);
          pm.environment.set("ExistingfirstName", responseadminfirstname);
          pm.environment.set("ExistinglastName", responseadminlastname);
          pm.environment.set("AttributesStatus", responseadminattributesstatus);
          pm.environment.set(
            "Existingverificationcode",
            responseadminverificationtoken
          );
        },
        auth(config, Var) {
          config.headers.Authorization = "Bearer undefined";
        }
      });
    });

    group("Fetch pending users", function() {
      postman[Request]({
        name: "Fetch all users pending for approval",
        id: "c1f537df-0b36-428c-9f4d-870ea79e5b49",
        method: "GET",
        address: "{{App_url}}/api/users/pending",
        headers: {
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });
          // Check that the status code is 200
          pm.test("Status code is 200", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(200);
          });

          // Retrieve environment variables
          const adminUserId = pm.environment.get("AdminUserId");

          // Check that the body includes the string from the environment variable
          pm.test("Body matches string", function() {
            // Use the retrieved environment variable in the test
            pm.expect(pm.response.text()).to.include(adminUserId);
          });

          pm.test("Body matches string 'pending'", function() {
            // Use the retrieved environment variable in the test
            pm.expect(pm.response.text()).to.include("pending");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var](
            "admin_access_token"
          )}`;
        }
      });
    });

    group("Approve Users", function() {
      postman[Request]({
        name: "Approve Created User",
        id: "0c3152e7-6970-478a-a559-3e0d6f1c855f",
        method: "POST",
        address: "{{App_url}}/api/users/{{AdminUserId}}/approve",
        headers: {
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(200);
          });

          // Check that the body includes the string "pending"
          pm.test(
            "Body matches string 'User approved successfully'",
            function() {
              pm.expect(pm.response.text()).to.include(
                "User approved successfully"
              );
            }
          );
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var](
            "admin_access_token"
          )}`;
        }
      });
    });

    group("User Email Verification After Approval", function() {
      postman[Request]({
        name: "Verify User Email After Approval",
        id: "1029b580-2f9d-496d-ad96-599f4ec557ce",
        method: "GET",
        address:
          "{{emailURL}}/api/Messages?searchTerms=%7B%7BExistingemail%7D%7D&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
        pre() {
          console.log(
            "Adding a delay of 3 seconds before sending the request..."
          );

          // Delay of 3 seconds (3000 milliseconds)
          setTimeout(function() {
            console.log("Delay finished. Proceeding to send the request.");
            // Any code you want to execute after the delay can go here
          }, 2500);
        },
        post(response) {
          // Fetch customOrgName from environment
          let customOrgName = pm.environment.get("customOrgName");

          pm.test("Status code is 200", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(200);
          });
        }
      });
    });

    group("Fetch All Users", function() {
      postman[Request]({
        name: "Fetch all users",
        id: "e967271b-e17d-4983-b996-a54e84d34359",
        method: "GET",
        address: "{{App_url}}/api/users",
        headers: {
          "Content-Type": "application/json"
        },
        post(response) {
          // Check that the status code is 200
          pm.test("Status code is 200", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(200);
          });

          // Retrieve environment variables
          const adminUserId = pm.environment.get("AdminUserId");

          // Check that the body includes the string from the environment variable
          pm.test("Body matches string", function() {
            // Use the retrieved environment variable in the test
            pm.expect(pm.response.text()).to.include(adminUserId);
          });

          pm.test("Body matches string 'approved'", function() {
            // Use the retrieved environment variable in the test
            pm.expect(pm.response.text()).to.include("approved");
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var](
            "admin_access_token"
          )}`;
        }
      });
    });

    group("Verify email", function() {
      postman[Request]({
        name: "Verifying users email",
        id: "156f35ee-f6ac-4960-be51-657fa0466033",
        method: "POST",
        address: "{{App_url}}/api/auth/verify-email",
        data: '{\n    "token": "{{Existingverificationcode}}"\n}',
        headers: {
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(200);
          });

          // Check that the body includes the string "pending"
          pm.test(
            "Body matches string 'Email verified successfully'",
            function() {
              pm.expect(pm.response.text()).to.include(
                "Email verified successfully"
              );
            }
          );
        }
      });
    });

    group("Delete User and Organization after approval", function() {
      postman[Request]({
        name: "KeycloakAccessToken",
        id: "2b1015cc-1fd1-4242-b445-24358f62ba0f",
        method: "POST",
        address:
          "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
        data: {
          client_id: "{{keycloak_clientId}}",
          client_secret: "{{keycloak_secert}}",
          grant_type: "client_credentials"
        },
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        post(response) {
          pm.test("Status code is 200", function() {
            pm.response.to.have.status(200);
          });

          let jsonData = pm.response.json();

          if (jsonData.access_token) {
            pm.environment.set("keycloak_access_token", jsonData.access_token);
            console.log("Access token:", jsonData.access_token);
          } else {
            console.log("Error retrieving access token:", jsonData);
          }
        }
      });

      postman[Request]({
        name: "Delete User After Approval",
        id: "aa0bfb85-8a15-4dda-8932-274714b77db2",
        method: "DELETE",
        address:
          "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
        headers: {
          "Content-Type": "application/json"
        },
        post(response) {
          pm.test("Status code is 204", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(204);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var](
            "keycloak_access_token"
          )}`;
        }
      });

      postman[Request]({
        name: "Delete Org after Approval",
        id: "9d8b2277-79bb-4c98-91f0-10b06b956464",
        method: "DELETE",
        address:
          "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
        post(response) {
          pm.test("Status code is 204", function() {
            const statusCode = pm.response.code;
            pm.expect(statusCode).to.eql(204);
          });
        },
        auth(config, Var) {
          config.headers.Authorization = `Bearer ${pm[Var](
            "keycloak_access_token"
          )}`;
        }
      });
    });

    group("Agent Binary Copy", function() {
      group("Fetch Agentbinaries", function() {
        postman[Request]({
          name: "Fetch All Agentbinaries",
          id: "d4b3867a-e23f-4c38-8a1d-85d465263f35",
          method: "GET",
          address: "{{agentBinaryUrl}}/agentbinary/v1.0/",
          headers: {
            Accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();

            let fileNames = [];
            for (let version in jsonData.versions) {
              if (jsonData.versions.hasOwnProperty(version)) {
                // Loop through each file in the version
                jsonData.versions[version].forEach(file => {
                  // Push the filename into the array
                  fileNames.push(file.filename);
                });
              }
            }
            pm.environment.set("fileNames", JSON.stringify(fileNames));

            console.log(fileNames);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });
      });

      group("Download File", function() {
        postman[Request]({
          name: "Downloading a .exe file",
          id: "8e02de19-bd12-4d3e-a308-a0914575a6b1",
          method: "GET",
          address: "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{exefile}}",
          headers: {
            Accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });
      });
    });
  });

  group("User Flow", function() {
    group("Console", function() {
      group("Create and Approve User", function() {
        postman[Request]({
          name: "Get Admin Access Token",
          id: "59f124af-ad49-4e98-a343-384277b3909f",
          method: "POST",
          address:
            "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
          data: {
            client_id: "{{client_id}}",
            grant_type: "password",
            username: "{{admin_username}}",
            password: "{{admin_password}}",
            "scope ": "openid"
          },
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();

            var adminAccessToken = jsonData.access_token;

            pm.environment.set("admin_access_token", adminAccessToken);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Create User with valid data in console flow",
          id: "f04b6b4c-3b8c-4575-9c84-057c5669a0a9",
          method: "POST",
          address: "{{App_url}}/api/auth/signup",
          data:
            '{\n    "orgName": "{{customOrgName}}",\n    "adminUser": {\n        "username": "{{customUsername}}",\n        "email": "{{customEmail}}",\n        "firstName": "{{randomFirstName}}",\n        "lastName": "{{randomLastName}}",\n        "password": "{{password}}"\n    }\n}',
          headers: {
            "Content-Type": "application/json"
          },
          pre() {
            // Function to generate a random string of specified length
            function generateRandomString(length) {
              const chars =
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
              let result = "";
              for (let i = 0; i < length; i++) {
                result += chars.charAt(
                  Math.floor(Math.random() * chars.length)
                );
              }
              return result;
            }

            // Function to generate a random first name
            function generateRandomFirstName() {
              const names = ["Alice", "Bob", "Charlie", "David", "Eve"];
              return names[Math.floor(Math.random() * names.length)];
            }

            // Function to generate a random company name
            function generateRandomCompanyName() {
              const companies = [
                "techcorp",
                "innosoft",
                "globaldyn",
                "cybersol",
                "nextgen"
              ];
              return companies[Math.floor(Math.random() * companies.length)];
            }

            // Function to generate a GUID
            function generateGuid() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
                /[xy]/g,
                function(c) {
                  const r = (Math.random() * 16) | 0,
                    v = c === "x" ? r : (r & 0x3) | 0x8;
                  return v.toString(16);
                }
              );
            }

            // Function to remove commas and spaces from a string
            function sanitizeString(str) {
              return str.replace(/[\s,]/g, ""); // Remove spaces and commas
            }

            // Generate custom organization name, limited to 55 characters
            let customOrgName =
              "api-" +
              generateRandomString(3) +
              generateRandomCompanyName().substring(0, 10) + // Restrict to 10 characters
              generateRandomString(8) +
              generateGuid().substring(0, 20) + // Restrict to 20 characters
              generateRandomString(3);

            // Sanitize the customOrgName to remove commas and spaces
            customOrgName = sanitizeString(customOrgName);

            if (customOrgName.length > 55) {
              customOrgName = customOrgName.substring(0, 55);
            }

            // Set the generated customOrgName into the Postman environment
            pm.environment.set("customOrgName", customOrgName);

            pm.environment.set("randomFirstName", generateRandomFirstName());

            pm.environment.set("randomLastName", generateRandomFirstName());
            // Generate a custom email in a valid format, ensuring it’s <= 75 characters
            let customEmail =
              "api-" +
              pm.environment.get("randomFirstName").toLowerCase() +
              "." +
              generateRandomString(5).toLowerCase() +
              "@" +
              generateRandomCompanyName() +
              ".com";

            // Ensure email length does not exceed 75 characters
            if (customEmail.length > 75) {
              customEmail = customEmail.substring(0, 75);
            }

            // Generate custom username, limited to 75 characters
            let customUsername =
              "api-" +
              generateRandomString(5) +
              generateGuid().substring(0, 20) + // Restrict to 20 characters
              generateRandomString(5) +
              generateRandomFirstName().substring(0, 10) + // Restrict to 10 characters
              generateRandomString(3);

            if (customUsername.length > 75) {
              customUsername = customUsername.substring(0, 75);
            }

            // Set the generated values into Postman environment variables
            pm.environment.set("customOrgName", customOrgName);
            pm.environment.set("customUsername", customUsername);
            pm.environment.set("customEmail", customEmail);

            // Log the generated values to the console for verification
            console.log(
              "Custom Org Name (<= 55 chars, no commas or spaces):",
              customOrgName
            );
            console.log("Custom Username (<= 75 chars):", customUsername);
            console.log(
              "Custom Email (<= 75 chars, includes 'com'):",
              customEmail
            );
          },
          post(response) {
            // Check that the status code is 201
            pm.test("Status code is 201", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(201);
            });

            // Check that the body includes the string "pending"
            pm.test("Body matches string 'pending'", function() {
              pm.expect(pm.response.text()).to.include("pending");
            });

            // Parse the response JSON
            var jsonData = pm.response.json();

            // Extract the id and email from the response
            var responsetenantId = jsonData.tenant.id;
            var responseadminuserid = jsonData.adminUser.id;
            var responseadminusername = jsonData.adminUser.username;
            var responseadminemail = jsonData.adminUser.email;
            var responseadminfirstname = jsonData.adminUser.firstName;
            var responseadminlastname = jsonData.adminUser.lastName;
            var responseadminattributesstatus =
              jsonData.adminUser.attributes.status;
            var responseadminverificationtoken =
              jsonData.adminUser.attributes.verificationToken;

            // Set the id and email as environment variables
            pm.environment.set("TenantId", responsetenantId);
            pm.environment.set("AdminUserId", responseadminuserid);
            pm.environment.set("user_username", responseadminusername);
            pm.environment.set("Existingusername", responseadminusername);
            pm.environment.set("Existingemail", responseadminemail);
            pm.environment.set("ExistingfirstName", responseadminfirstname);
            pm.environment.set("ExistinglastName", responseadminlastname);
            pm.environment.set(
              "AttributesStatus",
              responseadminattributesstatus
            );
            pm.environment.set(
              "Existingverificationcode",
              responseadminverificationtoken
            );

            pm.environment.set("user_refresh_token", "test");
            pm.environment.set("user_token_expiration", 0);

            console.log("TenantId", pm.environment.get("TenantId"));
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Verify User Email for Signup",
          id: "06e681c6-ab48-4c75-aa4d-c0b7be6d7760",
          method: "GET",
          address:
            "{{emailURL}}/api/Messages?searchTerms=%7B%7BExistingemail%7D%7D&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
          pre() {
            console.log(
              "Adding a delay of 3 seconds before sending the request..."
            );

            // Delay of 3 seconds (3000 milliseconds)
            setTimeout(function() {
              console.log("Delay finished. Proceeding to send the request.");
              // Any code you want to execute after the delay can go here
            }, 1500);
          },
          post(response) {
            // Fetch customOrgName from environment
            let customOrgName = pm.environment.get("customOrgName");

            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Approve Created User in console flow",
          id: "d5f5ecfb-7ccd-41a2-ae32-58cc878f6ea6",
          method: "POST",
          address: "{{App_url}}/api/users/{{AdminUserId}}/approve",
          headers: {
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Check that the body includes the string "pending"
            pm.test(
              "Body matches string 'User approved successfully'",
              function() {
                pm.expect(pm.response.text()).to.include(
                  "User approved successfully"
                );
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Get Access Token",
          id: "0a1cf4cf-310f-457a-be4a-d55e69630889",
          method: "POST",
          address:
            "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
          data: {
            client_id: "{{client_id}}",
            grant_type: "password",
            username: "{{user_username}}",
            password: "{{user_password}}",
            "scope ": "openid"
          },
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();

            var userAccessToken = jsonData.access_token;

            pm.environment.set("user_access_token", userAccessToken);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });
      });

      group("Add Device", function() {
        postman[Request]({
          name: "Create Device",
          id: "453cd067-38ed-4f3e-b763-d8d9bc8a1d30",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/devices/",
          data:
            '{\n  "name": "{{deviceName}}",\n  "type": "{{deviceType}}",\n  "serial_number": "{{deviceSerialNumber}}",\n  "properties": {\n\t"IP" :"{{deviceIP}}",\n\t"LOCATION":"{{deviceLocation}}"\n\t}\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          pre() {
            // Generate a random number between 1 and 999999999
            const serialNumber = Math.floor(1 + Math.random() * 999999999);

            // Log the serial number for debugging
            console.log("Generated Serial Number: " + serialNumber);

            // Set the serial number as an environment variable
            pm.environment.set("deviceSerialNumber", serialNumber);
          },
          post(response) {
            // Define jsonData before using it in the test script
            const jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceSerialNumber = pm.environment.get("deviceSerialNumber");

            // Extract the id and email from the response
            var responseDeviceId = jsonData.id;

            // Set the id and email as environment variables
            pm.environment.set("deviceID", responseDeviceId);

            pm.test("Verify 'serial_number' is deviceSerialNumber", function() {
              pm.expect(jsonData).to.have.property("serial_number"); // Check if 'last_seen' exists
              pm.expect(jsonData.serial_number.toString()).to.equal(
                deviceSerialNumber.toString()
              ); // Verify 'last_seen' is null
            });

            pm.test("Verify 'last_seen' is null", function() {
              pm.expect(jsonData).to.have.property("last_seen"); // Check if 'last_seen' exists
              pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null
            });
          }
        });
      });

      group("Update Device", function() {
        postman[Request]({
          name: "Updating Device IP",
          id: "0f8985b8-4de6-45f0-be4f-98d67619ed1e",
          method: "PUT",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
          data:
            '{\n  "name": "{{deviceName}}",\n  "type": "{{deviceType}}",\n  "properties": {\n\t"IP" :"{{updatedDeviceIP}}",\n\t"LOCATION":"{{deviceLocation}}"\n\t}\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceSerialNumber = pm.environment.get("deviceSerialNumber");

            pm.test("Verify 'serial_number' is deviceSerialNumber", function() {
              const responseJson = pm.response.json(); // Parse response as JSON
              pm.expect(responseJson).to.have.property("serial_number"); // Check if 'last_seen' exists
              pm.expect(responseJson.serial_number.toString()).to.equal(
                deviceSerialNumber.toString()
              ); // Verify 'last_seen' is null
            });

            pm.test("Verify 'last_seen' is null", function() {
              const responseJson = pm.response.json(); // Parse response as JSON
              pm.expect(responseJson).to.have.property("last_seen"); // Check if 'last_seen' exists
              pm.expect(responseJson.last_seen).to.be.null; // Verify 'last_seen' is null
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Fetch a device in a Org after device update",
          id: "1aec537c-0214-4114-be58-aa767f07605e",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");
            const updatedDeviceIP = pm.environment.get("updatedDeviceIP");

            pm.test("Verify 'id' is deviceID", function() {
              const responseJson = pm.response.json(); // Parse response as JSON
              pm.expect(responseJson).to.have.property("id"); // Check if 'last_seen' exists
              pm.expect(responseJson.id.toString()).to.equal(
                deviceID.toString()
              ); // Verify 'last_seen' is null
            });

            pm.test("Verify IP is 'updatedDeviceIP'", function() {
              const responseJson = pm.response.json(); // Parse response as JSON
              pm.expect(responseJson).to.have.nested.property(
                "properties.IP",
                updatedDeviceIP
              ); // Check IP value
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Create Second Device",
          id: "133337a9-0e40-4a5a-a866-ff15f8eca0d8",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/devices/",
          data:
            '{\n  "name": "{{secondDeviceName}}",\n  "type": "{{deviceType}}",\n  "serial_number": "{{secondDeviceSerialNumber}}",\n  "properties": {\n\t"IP" :"{{deviceIP}}",\n\t"LOCATION":"{{deviceLocation}}"\n\t}\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          pre() {
            // Generate a random number between 1 and 999999999
            const serialNumber = Math.floor(1 + Math.random() * 999999999);

            // Log the serial number for debugging
            console.log("Generated Serial Number: " + serialNumber);

            // Set the serial number as an environment variable
            pm.environment.set("secondDeviceSerialNumber", serialNumber);
          },
          post(response) {
            // Define jsonData before using it in the test script
            const jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const secondDeviceSerialNumber = pm.environment.get(
              "secondDeviceSerialNumber"
            );

            // Extract the id and email from the response
            var responseDeviceId = jsonData.id;

            pm.test(
              "Verify 'serial_number' is secondDeviceSerialNumber",
              function() {
                pm.expect(jsonData).to.have.property("serial_number"); // Check if 'last_seen' exists
                pm.expect(jsonData.serial_number.toString()).to.equal(
                  secondDeviceSerialNumber.toString()
                ); // Verify 'last_seen' is null
              }
            );

            pm.test("Verify 'last_seen' is null", function() {
              pm.expect(jsonData).to.have.property("last_seen"); // Check if 'last_seen' exists
              pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null
            });
          }
        });
      });

      group("Update Device Heartbeat", function() {
        postman[Request]({
          name: "Update Heartbeat",
          id: "036b43d8-2011-43b9-9acd-a0f6b9fad96b",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/heartbeat",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Define jsonData before using it in the test script
            const jsonData = pm.response.json();

            // Verify status code is 200
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Fetch and log 'created_at' field
            pm.test("Fetch 'last_seen' field", function() {
              pm.expect(jsonData).to.have.property("last_seen"); // Check if 'created_at' exists
              console.log("last_seen:", jsonData.last_seen); // Log 'created_at' value
            });

            pm.environment.set("last_seen", jsonData.last_seen);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Fetch Device After heartbeat", function() {
        postman[Request]({
          name: "Fetch a device to check status",
          id: "e65c613f-5e28-449e-9317-178edb14d6ce",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Define jsonData before using it in the test script
            const jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");
            const lastseenAtEnv = pm.environment.get("last_seen"); // Fetch 'created_at' from environment variable

            // Verify 'id' matches deviceID from environment variable
            pm.test("Verify 'id' is deviceID", function() {
              pm.expect(jsonData).to.have.property("id");
              pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());
            });

            // Verify 'created_at' matches the value from the environment variable
            pm.test("Verify 'last_seen' is correct", function() {
              pm.expect(jsonData).to.have.property("last_seen");
              pm.expect(jsonData.last_seen).to.equal(lastseenAtEnv);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group(
        "Fetch Device and check status after 1 min where heartbeat call is not done",
        function() {
          postman[Request]({
            name: "Fetch a device to check status after 1 min",
            id: "4b09bfd3-fab1-4fe5-bae9-c815cfc3b23a",
            method: "GET",
            address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
            headers: {
              Accept: "application/json",
              "X-Org-Key": "{{TenantId}}"
            },
            pre() {
              console.log(
                "Adding a delay of 60 seconds before sending the request..."
              );

              // Delay of 60 seconds (60000 milliseconds)
              setTimeout(function() {
                console.log("Delay finished. Proceeding to send the request.");
                // Any code you want to execute after the delay can go here
              }, 60000);
            },
            post(response) {
              // Define jsonData before using it in the test script
              const jsonData = pm.response.json();

              pm.test("Status code is 200", function() {
                const statusCode = pm.response.code;
                pm.expect(statusCode).to.eql(200);
              });

              // Retrieve environment variables
              const deviceID = pm.environment.get("deviceID");
              const lastseenAtEnv = pm.environment.get("last_seen"); // Fetch 'created_at' from environment variable

              // Verify 'id' matches deviceID from environment variable
              pm.test("Verify 'id' is deviceID", function() {
                pm.expect(jsonData).to.have.property("id");
                pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());
              });

              // Verify 'created_at' matches the value from the environment variable
              pm.test("Verify 'last_seen' is correct", function() {
                pm.expect(jsonData).to.have.property("last_seen");
                pm.expect(jsonData.last_seen).to.equal(lastseenAtEnv);
              });
            },
            auth(config, Var) {
              config.headers.Authorization = `Bearer ${pm[Var](
                "user_access_token"
              )}`;
            }
          });
        }
      );
    });

    group("EndPoint-Config", function() {
      group("Fetch and update end-point config details", function() {
        postman[Request]({
          name: "Fetch end-point config details for a device",
          id: "c82d6951-9fa6-4222-b320-02353812acef",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Parse response body as JSON
            const jsonData = pm.response.json();

            // Status Code Test
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");

            // Verify the 'id' matches 'deviceID'
            pm.test("Verify 'id' is deviceID", function() {
              pm.expect(jsonData).to.have.property("id");
              pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());
            });

            // Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', 'Whitelist' are present
            pm.test(
              "Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present",
              function() {
                pm.expect(jsonData.config).to.have.property("Analysis");
                pm.expect(jsonData.config).to.have.property("Decryptor");
                pm.expect(jsonData.config).to.have.property("Bands");
                pm.expect(jsonData.config).to.have.property(
                  "MonitorStatistics"
                );
                pm.expect(jsonData.config).to.have.property("Whitelist");
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Update end-point config details for a device",
          id: "43a6c5e9-8a22-4b20-9b19-5f38bd453a1e",
          method: "PUT",
          address: "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
          data:
            '{\n    "name": "HP dash LP Config",\n    "type": "Laptop",\n    "config": {\n        "MemcryptLog": {\n            "post_ip": "localhost",\n            "port": "{{memcryptLog_port}}",\n            "local_log_location": "C:\\\\Windows\\\\Detect\\\\TempDEBUG=false"\n        },\n        "Analysis": {\n            "dir_to_analyse": "",\n            "key": "",\n            "nonce": "",\n            "ipaddress": "localhost",\n            "port": "8899",\n            "infected_file": "",\n            "dir_candidate_values": "",\n            "recovery_file": "C:\\\\Windows\\\\Detect\\\\Tempremote=true",\n            "parallel": "false",\n            "bulk": "false"\n        },\n        "Decryptor": {\n            "dir_candidate_values": "",\n            "infected_file": "",\n            "dir_candidates_folder": "",\n            "dir_ransomware_folder": "",\n            "dir_extracts_folder": "",\n            "decrypts_folder": "",\n            "recovery_file": "C:\\\\Windows\\\\Detect\\\\Tempsafeext_filename=C:\\\\Windows\\\\Detect\\\\SafeExt.csv",\n            "extensionvalidationfile": "C:\\\\Windows\\\\Detect\\fileidentifier.json",\n            "ransomwareparameterfile": "C:\\\\Windows\\\\Detect\\ransomware.json",\n            "time_limit": "1800",\n            "remote": "true",\n            "parallel": "auto",\n            "algorithms": "CHACHA20#256#NA,CHACHA8#256#NA,SALSA20#256#NA,AES#256#CBC,AES#256#CTR,AES#256#CFB",\n            "bulk": "false"\n        },\n        "Bands": {\n            "cpured": "90",\n            "cpuamber": "70",\n            "memred": "90",\n            "memamber": "70",\n            "diskred": "90",\n            "diskamber": "70",\n            "ioreadsred": "100",\n            "ioreadsamber": "20",\n            "iowritesred": "100",\n            "iowritesamber": "20",\n            "updatedeltared": "30",\n            "updatedeltaamber": "10"\n        },\n        "MonitorStatistics": {\n            "ipaddress": "localhost",\n            "port": "8888",\n            "refreshinterval": "10"\n        },\n        "Whitelist": {\n            "inspect_folder": "c:whitelist_path=C:\\\\Windows\\\\Detect\\\\hashwhitelist.csv",\n            "hashes_number": "",\n            "hash_size": "",\n            "buffer_size": "",\n            "remote": "true",\n            "append": "true",\n            "centralised": "true",\n            "ipaddress": "localhost",\n            "port": "8888"\n        },\n        "Extractor": {\n            "logswitch": "silent",\n            "security_switch": "off",\n            "extract_folder": "C:\\\\Windows\\\\Detect\\\\Temp",\n            "hash_filename": "C:\\\\Windows\\\\Detect\\\\hashwhitelist.csv",\n            "folder_filename": "C:\\\\Windows\\\\Detect\\folderwhitelist.enc",\n            "suspectext_filename": "C:\\\\Windows\\\\Detect\\\\SuspectExt.enc",\n            "safeext_filename": "C:\\\\Windows\\\\Detect\\\\SafeExt.enc",\n            "suspectext_killswitch": "on"\n        }\n    }\n}',
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Parse response body as JSON
            const jsonData = pm.response.json();

            // Status Code Test
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");

            // Verify the 'id' matches 'deviceID'
            pm.test("Verify 'id' is deviceID", function() {
              pm.expect(jsonData).to.have.property("id");
              pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());
            });

            // Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', 'Whitelist' are present
            pm.test(
              "Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present",
              function() {
                pm.expect(jsonData.config).to.have.property("Analysis");
                pm.expect(jsonData.config).to.have.property("Decryptor");
                pm.expect(jsonData.config).to.have.property("Bands");
                pm.expect(jsonData.config).to.have.property(
                  "MonitorStatistics"
                );
                pm.expect(jsonData.config).to.have.property("Whitelist");
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name:
            "Verify whether updated end-point config details are been fetched",
          id: "f3c299e5-aec5-4563-a5a4-45c14c1e54f3",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Parse response body as JSON
            const jsonData = pm.response.json();

            // Status Code Test
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");
            const memcryptlogPort = pm.environment.get("memcryptLog_port"); // Retrieve memcryptLog_port from environment

            // Verify the 'id' matches 'deviceID'
            pm.test("Verify 'id' is deviceID", function() {
              pm.expect(jsonData).to.have.property("id");
              pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());
            });

            // Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', 'Whitelist' are present
            pm.test(
              "Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present",
              function() {
                pm.expect(jsonData.config).to.have.property("Analysis");
                pm.expect(jsonData.config).to.have.property("Decryptor");
                pm.expect(jsonData.config).to.have.property("Bands");
                pm.expect(jsonData.config).to.have.property(
                  "MonitorStatistics"
                );
                pm.expect(jsonData.config).to.have.property("Whitelist");
              }
            );

            // Verify the port in MemcryptLog array
            pm.test(
              "Verify 'port' in MemcryptLog matches environment variable",
              function() {
                pm.expect(jsonData.config).to.have.property("MemcryptLog"); // Check if MemcryptLog exists
                pm.expect(jsonData.config.MemcryptLog).to.have.property("port"); // Check if 'port' exists within MemcryptLog
                pm.expect(jsonData.config.MemcryptLog.port.toString()).to.equal(
                  memcryptlogPort.toString()
                ); // Compare the port with environment variable
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Fetch end-point config details of all the devices in the org",
          id: "e7515274-85e3-4add-bf9c-e49ff3c7c44c",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/endpoint-config/",
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Parse response body as JSON
            let jsonData;
            try {
              jsonData = pm.response.json();
            } catch (e) {
              console.error("Failed to parse JSON:", e);
              pm.test("Response is valid JSON", function() {
                pm.expect.fail("Response body is not valid JSON");
              });
              return; // Exit if JSON is invalid
            }

            // Status Code Test
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");
            console.log("Device ID from environment:", deviceID);

            // Verify the presence of 'id' and compare it with 'deviceID'
            pm.test("Verify 'id' is deviceID", function() {
              let found = false;
              jsonData.forEach(function(item) {
                if (item.id.toString() === deviceID.toString()) {
                  found = true;
                }
              });
              pm.expect(found).to.be.true; // Test passes if 'id' is found matching deviceID
            });

            // Verify the presence of 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays in each config
            jsonData.forEach(function(item, index) {
              pm.test(
                `Verify config sections in object #${index + 1}`,
                function() {
                  pm.expect(item).to.have.property("config");
                  const config = item.config;

                  // Check for presence of required properties in the config
                  pm.expect(config).to.have.property("Analysis");
                  pm.expect(config).to.have.property("Decryptor");
                  pm.expect(config).to.have.property("Bands");
                  pm.expect(config).to.have.property("MonitorStatistics");
                  pm.expect(config).to.have.property("Whitelist");
                }
              );
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Delete Device", function() {
        postman[Request]({
          name: "Delete device",
          id: "8fb08d88-0285-40de-9a74-8b41b0e8994e",
          method: "DELETE",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
          headers: {
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            // Define jsonData before using it in the test script
            const jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceID = pm.environment.get("deviceID");

            pm.test("Verify Device Deleted successfully message", function() {
              pm.expect(jsonData.status).to.include("success");
              pm.expect(jsonData.message).to.include(
                "Device Deleted successfully"
              );
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Delete User and Organization after console flow", function() {
        postman[Request]({
          name: "KeycloakAccessToken",
          id: "505c4714-f0b8-4421-a282-68e25a442e87",
          method: "POST",
          address:
            "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
          data: {
            client_id: "{{keycloak_clientId}}",
            client_secret: "{{keycloak_secert}}",
            grant_type: "client_credentials"
          },
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            let jsonData = pm.response.json();

            if (jsonData.access_token) {
              pm.environment.set(
                "keycloak_access_token",
                jsonData.access_token
              );
              console.log("Access token:", jsonData.access_token);
            } else {
              console.log("Error retrieving access token:", jsonData);
            }
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Delete User After console flow",
          id: "c6c584cb-8043-4dd3-9431-9f41e67a9369",
          method: "DELETE",
          address:
            "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
          headers: {
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 204", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(204);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "keycloak_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Delete Org after console flow",
          id: "3d3845e4-04a5-4905-bb06-56d463acb0d5",
          method: "DELETE",
          address:
            "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
          post(response) {
            pm.test("Status code is 204", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(204);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "keycloak_access_token"
            )}`;
          }
        });
      });
    });

    group("WhiteListing", function() {
      group("Create and Approve User", function() {
        postman[Request]({
          name: "Get Admin Access Token",
          id: "e62b4d0f-2939-476a-afda-b1eb4ed1f3b9",
          method: "POST",
          address:
            "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
          data: {
            client_id: "{{client_id}}",
            grant_type: "password",
            username: "{{admin_username}}",
            password: "{{admin_password}}",
            "scope ": "openid"
          },
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();

            var adminAccessToken = jsonData.access_token;

            pm.environment.set("admin_access_token", adminAccessToken);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Create User with valid data in console flow",
          id: "7cf1ab04-5c51-4243-8361-192251637b90",
          method: "POST",
          address: "{{App_url}}/api/auth/signup",
          data:
            '{\n    "orgName": "{{customOrgName}}",\n    "adminUser": {\n        "username": "{{customUsername}}",\n        "email": "{{customEmail}}",\n        "firstName": "{{randomFirstName}}",\n        "lastName": "{{randomLastName}}",\n        "password": "{{password}}"\n    }\n}',
          headers: {
            "Content-Type": "application/json"
          },
          pre() {
            // Function to generate a random string of specified length
            function generateRandomString(length) {
              const chars =
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
              let result = "";
              for (let i = 0; i < length; i++) {
                result += chars.charAt(
                  Math.floor(Math.random() * chars.length)
                );
              }
              return result;
            }

            function generateProfessionalSuffix(length) {
              const suffixes = ["Tech", "Soft", "Corp", "Dyn", "Sys"];
              return (
                suffixes[Math.floor(Math.random() * suffixes.length)] +
                generateRandomString(length - suffixes[0].length)
              );
            }
            // Function to generate a random first name
            function generateRandomFirstName() {
              const names = ["Alice", "Bob", "Charlie", "David", "Eve"];
              return names[Math.floor(Math.random() * names.length)];
            }

            // Function to generate a random company name
            function generateRandomCompanyName() {
              const companies = ["abc", "def", "xyz"];
              return companies[Math.floor(Math.random() * companies.length)];
            }

            // Function to generate a GUID
            function generateGuid() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
                /[xy]/g,
                function(c) {
                  const r = (Math.random() * 16) | 0,
                    v = c === "x" ? r : (r & 0x3) | 0x8;
                  return v.toString(16);
                }
              );
            }

            // Function to remove commas and spaces from a string
            function sanitizeString(str) {
              return str.replace(/[\s,]/g, ""); // Remove spaces and commas
            }

            let customOrgName = "api-" + generateProfessionalSuffix(6);
            console.log(customOrgName);

            // Sanitize the customOrgName to remove commas and spaces
            customOrgName = sanitizeString(customOrgName);

            if (customOrgName.length > 55) {
              customOrgName = customOrgName.substring(0, 55);
            }

            // Set the generated customOrgName into the Postman environment
            pm.environment.set("customOrgName", customOrgName);

            pm.environment.set("randomFirstName", generateRandomFirstName());

            pm.environment.set("randomLastName", generateRandomFirstName());
            // Generate a custom email in a valid format, ensuring it’s <= 75 characters
            let customEmail =
              "api-" +
              pm.environment.get("randomFirstName").toLowerCase() +
              "." +
              generateRandomString(5).toLowerCase() +
              "@" +
              generateRandomCompanyName() +
              ".com";

            // Ensure email length does not exceed 75 characters
            if (customEmail.length > 75) {
              customEmail = customEmail.substring(0, 75);
            }

            // Generate custom username, limited to 75 characters
            let customUsername = customEmail;

            // Set the generated values into Postman environment variables
            pm.environment.set("customOrgName", customOrgName);
            pm.environment.set("customUsername", customUsername);
            pm.environment.set("customEmail", customEmail);

            // Log the generated values to the console for verification
            console.log(
              "Custom Org Name (<= 55 chars, no commas or spaces):",
              customOrgName
            );
            console.log("Custom Username (<= 75 chars):", customUsername);
            console.log(
              "Custom Email (<= 75 chars, includes 'com'):",
              customEmail
            );
          },
          post(response) {
            // Check that the status code is 201
            pm.test("Status code is 201", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(201);
            });

            // Check that the body includes the string "pending"
            pm.test("Body matches string 'pending'", function() {
              pm.expect(pm.response.text()).to.include("pending");
            });

            // Parse the response JSON
            var jsonData = pm.response.json();

            // Extract the id and email from the response
            var responsetenantId = jsonData.tenant.id;
            var responseadminuserid = jsonData.adminUser.id;
            var responseadminusername = jsonData.adminUser.username;
            var responseadminemail = jsonData.adminUser.email;
            var responseadminfirstname = jsonData.adminUser.firstName;
            var responseadminlastname = jsonData.adminUser.lastName;
            var responseadminattributesstatus =
              jsonData.adminUser.attributes.status;
            var responseadminverificationtoken =
              jsonData.adminUser.attributes.verificationToken;

            // Set the id and email as environment variables
            pm.environment.set("TenantId", responsetenantId);
            pm.environment.set("AdminUserId", responseadminuserid);
            pm.environment.set("user_username", responseadminusername);
            pm.environment.set("Existingusername", responseadminusername);
            pm.environment.set("Existingemail", responseadminemail);
            pm.environment.set("ExistingfirstName", responseadminfirstname);
            pm.environment.set("ExistinglastName", responseadminlastname);
            pm.environment.set(
              "AttributesStatus",
              responseadminattributesstatus
            );
            pm.environment.set(
              "Existingverificationcode",
              responseadminverificationtoken
            );

            pm.environment.set("user_refresh_token", "test");
            pm.environment.set("user_token_expiration", 0);

            console.log("TenantId", pm.environment.get("TenantId"));
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Approve Created User in console flow",
          id: "eec0a04e-7208-4e89-b29f-8f5727e74e2a",
          method: "POST",
          address: "{{App_url}}/api/users/{{AdminUserId}}/approve",
          headers: {
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Check that the body includes the string "pending"
            pm.test(
              "Body matches string 'User approved successfully'",
              function() {
                pm.expect(pm.response.text()).to.include(
                  "User approved successfully"
                );
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Get Access Token",
          id: "76f589fd-b554-47cc-b8c6-406f741a9f7a",
          method: "POST",
          address:
            "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
          data: {
            client_id: "{{client_id}}",
            grant_type: "password",
            username: "{{user_username}}",
            password: "{{user_password}}",
            "scope ": "openid"
          },
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();

            var userAccessToken = jsonData.access_token;

            pm.environment.set("user_access_token", userAccessToken);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "admin_access_token"
            )}`;
          }
        });
      });

      group("Create Device", function() {
        postman[Request]({
          name: "Create Device",
          id: "355a5a7d-de1c-4f58-8dc4-2ff51d20bd72",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/devices/",
          data:
            '{\n  "name": "{{deviceName}}",\n  "type": "{{deviceType}}",\n  "serial_number": "{{deviceSerialNumber}}",\n  "properties": {\n\t"IP" :"{{deviceIP}}",\n\t"LOCATION":"{{deviceLocation}}"\n\t}\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          pre() {
            // Generate a random number between 1 and 999999999
            const serialNumber = Math.floor(1 + Math.random() * 999999999);

            // Log the serial number for debugging
            console.log("Generated Serial Number: " + serialNumber);

            // Set the serial number as an environment variable
            pm.environment.set("deviceSerialNumber", serialNumber);
            console.log("TenentId" + pm.environment.get("TenantId"));
          },
          post(response) {
            // Define jsonData before using it in the test script
            const jsonData = pm.response.json();

            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });

            // Retrieve environment variables
            const deviceSerialNumber = pm.environment.get("deviceSerialNumber");

            // Extract the id and email from the response
            var responseDeviceId = jsonData.id;

            // Set the id and email as environment variables
            pm.environment.set("deviceID", responseDeviceId);

            pm.test("Verify 'serial_number' is deviceSerialNumber", function() {
              pm.expect(jsonData).to.have.property("serial_number"); // Check if 'last_seen' exists
              pm.expect(jsonData.serial_number.toString()).to.equal(
                deviceSerialNumber.toString()
              ); // Verify 'last_seen' is null
            });

            pm.test("Verify 'last_seen' is null", function() {
              pm.expect(jsonData).to.have.property("last_seen"); // Check if 'last_seen' exists
              pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null
            });
          }
        });
      });

      group("Add Application", function() {
        postman[Request]({
          name: "Create Application",
          id: "1c2aacc5-475e-4e1e-a041-d2370764eeb6",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications",
          data:
            '{\r\n  "name": "{{applicationName}}",\r\n  "version": "1.82.0",\r\n  "publisher": "Microsoft",\r\n  "hash": "{{hash}}"\r\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          pre() {
            // Generate random name
            const applicationName = `AppName-${Math.random()
              .toString(36)
              .substring(2, 8)}`;

            // Set the variable for the request body
            pm.environment.set("applicationName", applicationName);

            function generateRandomHash(length = 10) {
              return [...Array(length)]
                .map(() =>
                  Math.random()
                    .toString(36)
                    .substring(2, 3)
                )
                .join("");
            }

            const randomHash = generateRandomHash();

            // Set the generated hash as an environment variable
            pm.environment.set("hash", randomHash);

            // Log the generated random name
            console.log(`Generated application Name: ${applicationName}`);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            var responseapplicationid = jsonData.id;
            var responseaplicatiomnname = jsonData.name;
            pm.environment.set("ApplicationId", responseapplicationid);
            pm.environment.set("Applicationname", responseaplicatiomnname);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Fetch Applications", function() {
        postman[Request]({
          name: "Fetch all Applications in a Org",
          id: "de125c5d-7728-4cc3-a7a8-2f05a8c8e8de",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/applications?skip=0&limit=100",
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test("Body matches  application name", function() {
              pm.expect(pm.response.text()).to.include(
                pm.environment.get("applicationName")
              );
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Create device Inventory", function() {
        postman[Request]({
          name: "Create device inventory with valid data",
          id: "02228798-4db0-4685-be5d-4cf26258f95d",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
          data:
            '{\r\n  "items": [\r\n    {\r\n      "name": "{{applicationName}}",\r\n      "version": "1.82.0",\r\n      "publisher": "Microsoft",\r\n      "hash": "a1b2c3d4e5f6g7h8i9j0k"\r\n    }\r\n  ]\r\n}',
          headers: {
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            // Parse the response body as JSON
            let responseData = pm.response.json();

            // Access the 'id' field from the first object in the response
            let inventoryId = responseData[0].id;

            // Store the 'id' in the environment variable 'inventory_id'
            pm.environment.set("inventory_id", inventoryId);

            // Log the stored inventory ID to the console (optional)
            console.log("Inventory ID:", inventoryId);
          },
          auth(config, Var) {
            config.headers.Authorization =
              "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwUUFZYUpuXzFxNlVBanJWOEhSbkFaYWJyVmp4TkdrakhXYm55S0sycy1NIn0.eyJleHAiOjE3Mjc5NTY4MDcsImlhdCI6MTcyNzk1NjUwNywiYXV0aF90aW1lIjoxNzI3OTU1NjY5LCJqdGkiOiJjYWQwZDE1Mi00YmY4LTRjZDktOWY1MC1iODJiMGNjNzg1NWEiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODEvcmVhbG1zL21lbWNyeXB0IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjdkY2IyM2U3LTIzNDgtNDFmNS05MjBlLTgyZDA5Y2JjNWViZSIsInR5cCI6IkJlYXJlciIsImF6cCI6Im1lbWNyeXB0LWZyb250ZW5kIiwic2lkIjoiMmMyZDA1MTUtMmU4Yi00NDhjLTg0YzItMWU5ZDQzMzcxYTNiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL29hdXRoLnBzdG1uLmlvIiwiaHR0cDovL2xvY2FsaG9zdDozMDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAxIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLW1lbWNyeXB0Iiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsIk9SR19BRE1JTiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjEyNDBmMGY3LTE2ZDUtNDI4Ny05YWUwLWQ3Y2NjNDVmNWM1OSIsIm5hbWUiOiJNZWdnaWUgQWRhbXMiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJnb2VtYzY1OTAzNTM0LTEzZjMtNDlhZi1icTFnNTFhdmVyeXU3cCIsImdpdmVuX25hbWUiOiJNZWdnaWUiLCJmYW1pbHlfbmFtZSI6IkFkYW1zIiwiZW1haWwiOiJ5bXFhbHljaWFrc2oydmRjMzczM2RiLTY0OTgtNDNkZS04MzB6bnpjb21ub3ZhLmtlbW1lcjU5QGhvdG1haWwuY29tIn0.kRODgkino0SktkQL2kMFTpoMDAnZyLtFt69ob-AYyV5OE7crV-pZQ70588Ey4yo866AotZTsrqY7Crz4zMx9POo-o-2MUojDUh8mmacrgGiK6fe4PXsdhn6e4r7cVNKUfhUNzGP-6R_lqvq91NGfr1EY0P74n3jHuLPbVuB-r-8DOluNVEA4n4jDw2ZK5XVBNvjcvQf5YznfhGR2UFLqTlG_5i7KrY2Q75BMCSckBbOY-yOmE9izjImi1WxlYTSRxeoy6j-yeKjKNN1QnwT9B83JkY-KLhQG4r-OvsCXIHrk9FWkqylCJcNrG4Jg6xzhGFEjprW5we7vD9Fq98PdrA";
          }
        });
      });

      group("Fetch Inventory details after inventory is added", function() {
        postman[Request]({
          name: "Fetch All inventory with in device",
          id: "16946b17-deee-4436-bc5c-78ed7a40499d",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test("Body should containg a string device id", function() {
              pm.expect(pm.response.text()).to.include(
                pm.environment.get("deviceID")
              );
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Approve Application", function() {
        postman[Request]({
          name: "Approving a application",
          id: "680777df-fac0-4963-8173-32df2be8d2e9",
          method: "POST",
          address:
            "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/approve",
          headers: {
            Accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Body should containg a string appication name",
              function() {
                pm.expect(pm.response.text()).to.include(
                  pm.environment.get("Applicationname")
                );
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Fetch Application and inventory status when approved", function() {
        postman[Request]({
          name: "Fetch Applications having Approved status",
          id: "7e6d9e60-0065-4e1f-b684-eb0a55a906bd",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/applications?skip=0&limit=100",
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            // pm.test("Verify application id has status approved", function() {
            //   let jsonData = pm.response.json();
            //   let targetId = pm.environment.get("ApplicationId");
            //   pm.expect(jsonData)
            //     .to.have.property("applications")
            //     .that.is.an("array");
            //   let found = jsonData.applications.find(
            //     item => item.id === targetId
            //   );
            //   pm.expect(found).to.be.an("object");
            //   pm.expect(found.status).to.eql("approved");
            // });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Fetch inventory with in device having Approved status",
          id: "e4ee1772-35bb-41d5-a072-4eb6404173b5",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/inventory",
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            // pm.test("Verify application id has status approved", function() {
            //   var jsonData = pm.response.json();

            //   let targetId = pm.environment.get("ApplicationId");
            //   console.log(pm.environment.get("ApplicationId"));
            //   pm.expect(jsonData)
            //     .to.have.property("applications")
            //     .that.is.an("array");
            //   let found = jsonData.applications.find(
            //     item => item.application.id === targetId
            //   );
            //   pm.expect(found).to.be.an("object");
            //   console.log(found.status);
            //   pm.expect(found.status).to.eql("approved");
            // });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Delete Inventory", function() {
        postman[Request]({
          name: "Delete Inventory using user access token",
          id: "59a1fad7-244c-4d11-891a-54f306c9920e",
          method: "DELETE",
          address: "{{consoleUrl}}/console/v1.0/inventory/{{inventory_id}}",
          headers: {
            Accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Reject Application", function() {
        postman[Request]({
          name: "Create Application",
          id: "5645bc07-8bf1-44bb-8cda-ba8dadd5561f",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications",
          data:
            '{\r\n  "name": "{{applicationName}}",\r\n  "version": "1.82.0",\r\n  "publisher": "Microsoft",\r\n  "hash": "{{hash}}"\r\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          pre() {
            // Generate random name
            const applicationName = `AppName-${Math.random()
              .toString(36)
              .substring(2, 8)}`;

            // Set the variable for the request body
            pm.environment.set("applicationName", applicationName);

            function generateRandomHash(length = 10) {
              return [...Array(length)]
                .map(() =>
                  Math.random()
                    .toString(36)
                    .substring(2, 3)
                )
                .join("");
            }

            const randomHash = generateRandomHash();

            // Set the generated hash as an environment variable
            pm.environment.set("hash", randomHash);

            // Log the generated random name
            console.log(`Generated application Name: ${applicationName}`);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            var responseapplicationid = jsonData.id;
            var responseaplicatiomnname = jsonData.name;
            pm.environment.set("ApplicationId", responseapplicationid);
            pm.environment.set("Applicationname", responseaplicatiomnname);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Rejecting a application",
          id: "db8c253b-9c65-4c85-9524-83a1e52e2b02",
          method: "POST",
          address:
            "{{consoleUrl}}/console/v1.0/applications/{{ApplicationId}}/deny",
          headers: {
            Accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Body should containg a string appication name",
              function() {
                pm.expect(pm.response.text()).to.include(
                  pm.environment.get("Applicationname")
                );
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Fetch Application and inventory status when Rejected", function() {
        postman[Request]({
          name: "Fetch the Applications having Rejected status",
          id: "689de31a-3f15-45ec-92bf-2c7a561cdc62",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/applications?skip=0&limit=100",
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test("Verify application id has status rejected", function() {
              let jsonData = pm.response.json();
              let targetId = pm.environment.get("ApplicationId");

              pm.expect(jsonData)
                .to.have.property("applications")
                .that.is.an("array");
              let found = jsonData.applications.find(
                item => item.id === targetId
              );

              pm.expect(found).to.be.an("object").that.is.not.null;

              console.log(found.status);
              pm.expect(found.status).to.eql("denied");
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Bulk Approve Applications", function() {
        postman[Request]({
          name: "Create Application",
          id: "ce2df719-1428-4b85-bd7d-9ed0d213cb26",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications",
          data:
            ' {\r\n  "name": "{{applicationName}}",\r\n  "version": "1.82.0",\r\n  "publisher": "Microsoft",\r\n  "hash": "{{hash}}"\r\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          pre() {
            // Generate random name
            const applicationName = `AppName-${Math.random()
              .toString(36)
              .substring(2, 8)}`;

            // Set the variable for the request body
            pm.environment.set("applicationName", applicationName);

            function generateRandomHash(length = 10) {
              return [...Array(length)]
                .map(() =>
                  Math.random()
                    .toString(36)
                    .substring(2, 3)
                )
                .join("");
            }

            const randomHash = generateRandomHash();

            // Set the generated hash as an environment variable
            pm.environment.set("hash", randomHash);

            // Log the generated random name
            console.log(`Generated application Name: ${applicationName}`);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            var responseapplicationid = jsonData.id;
            var responseaplicatiomnname = jsonData.name;
            pm.environment.set("ApplicationId", responseapplicationid);
            pm.environment.set("Applicationname", responseaplicatiomnname);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Create Second Application",
          id: "5b829a2a-54a5-4a71-a98e-c6b8944a3501",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications",
          data:
            ' {\r\n  "name": "{{secondApplicationName}}",\r\n  "version": "1.82.0",\r\n  "publisher": "Microsoft",\r\n  "hash": "{{hash}}"\r\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          pre() {
            const secondApplicationName = `AppName-${Math.random()
              .toString(36)
              .substring(2, 8)}`;

            // Set the variable for the request body
            function generateRandomHash(length = 10) {
              return [...Array(length)]
                .map(() =>
                  Math.random()
                    .toString(36)
                    .substring(2, 3)
                )
                .join("");
            }

            const randomHash = generateRandomHash();

            // Set the generated hash as an environment variable
            pm.environment.set("hash", randomHash);

            pm.environment.set("secondApplicationName", secondApplicationName);
            // Log the generated random name
            console.log(`Generated application Name: ${secondApplicationName}`);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            var responsesecondapplicationid = jsonData.id;
            var responsesecondaplicatiomnname = jsonData.name;
            pm.environment.set(
              "secondApplicationId",
              responsesecondapplicationid
            );
            pm.environment.set(
              "secondApplicationname",
              responsesecondaplicatiomnname
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Approving bulk Applications",
          id: "239c09d3-223d-4b59-8131-847ad50df77c",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications/bulk-approve",
          data: '[\n  "{{ApplicationId}}",\n  "{{secondApplicationId}}"\n]',
          headers: {
            accept: "application/json",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Body should containg a string appication name",
              function() {
                pm.expect(pm.response.text()).to.include(
                  pm.environment.get("Applicationname")
                );
              }
            );

            pm.test(
              "Body should containg a string appication name",
              function() {
                pm.expect(pm.response.text()).to.include(
                  pm.environment.get("secondApplicationName")
                );
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Bulk Reject Applications", function() {
        postman[Request]({
          name: "Create Application",
          id: "d81db03a-52b4-4fb9-be86-0598adde253f",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications",
          data:
            ' {\r\n  "name": "{{applicationName}}",\r\n  "version": "1.82.0",\r\n  "publisher": "Microsoft",\r\n  "hash": "{{hash}}"\r\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          pre() {
            // Generate random name
            const applicationName = `AppName-${Math.random()
              .toString(36)
              .substring(2, 8)}`;

            // Set the variable for the request body
            pm.environment.set("applicationName", applicationName);

            function generateRandomHash(length = 10) {
              return [...Array(length)]
                .map(() =>
                  Math.random()
                    .toString(36)
                    .substring(2, 3)
                )
                .join("");
            }

            const randomHash = generateRandomHash();

            // Set the generated hash as an environment variable
            pm.environment.set("hash", randomHash);
            // Log the generated random name
            console.log(`Generated application Name: ${applicationName}`);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            var responseapplicationid = jsonData.id;
            var responseaplicatiomnname = jsonData.name;
            pm.environment.set("ApplicationId", responseapplicationid);
            pm.environment.set("Applicationname", responseaplicatiomnname);
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Create Second Application",
          id: "22868231-8df3-4bb7-98f7-0ee6fa65c35f",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications",
          data:
            ' {\r\n  "name": "{{secondApplicationName}}",\r\n  "version": "1.82.0",\r\n  "publisher": "Microsoft",\r\n  "hash": "{{hash}}"\r\n}',
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json"
          },
          pre() {
            const secondApplicationName = `AppName-${Math.random()
              .toString(36)
              .substring(2, 8)}`;

            function generateRandomHash(length = 10) {
              return [...Array(length)]
                .map(() =>
                  Math.random()
                    .toString(36)
                    .substring(2, 3)
                )
                .join("");
            }

            const randomHash = generateRandomHash();

            // Set the generated hash as an environment variable
            pm.environment.set("hash", randomHash);

            pm.environment.set("secondApplicationName", secondApplicationName);
            // Log the generated random name
            console.log(`Generated application Name: ${secondApplicationName}`);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            var responsesecondapplicationid = jsonData.id;
            var responsesecondaplicatiomnname = jsonData.name;
            pm.environment.set(
              "secondApplicationId",
              responsesecondapplicationid
            );
            pm.environment.set(
              "secondApplicationname",
              responsesecondaplicatiomnname
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Rejecting bulk Applications",
          id: "1054c2dc-767c-4daf-98b8-ce762366d21d",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/applications/bulk-deny",
          data: '[\n  "{{ApplicationId}}",\n  "{{secondApplicationId}}"\n]',
          headers: {
            accept: "application/json",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            pm.test(
              "Body should containg a string appication name",
              function() {
                pm.expect(pm.response.text()).to.include(
                  pm.environment.get("Applicationname")
                );
              }
            );

            pm.test(
              "Body should containg a string appication name",
              function() {
                pm.expect(pm.response.text()).to.include(
                  pm.environment.get("secondApplicationName")
                );
              }
            );
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });
    });

    group("Activity Logs", function() {
      group("Creating Activity logs", function() {
        postman[Request]({
          name: "Creating a Activity log record against the device",
          id: "d0f46fb0-0d00-4486-b882-eb8fb585e5c8",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/activity-logs",
          data:
            '[{\n  "device_id": "{{deviceID}}",\n  "activity_type": "RANSOMWARE_DETECTION_LEVEL1",\n  "severity": "Medium",\n  "details": {\n    "threat_name": "WannaCry_LEVEL1",\n    "affected_files": [\n      "C:/Users/Documents/important.doc",\n      "C:/Users/Desktop/critical.xlsx"\n    ],\n    "detection_method": "BEHAVIOR_ANALYSIS",\n    "action_taken": "QUARANTINE",\n    "timestamp": "{{currentTimestamp}}"\n  }\n}\n]',
          headers: {
            accept: "application/json",
            Authorization:
              "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1OElOME41S0syM3h3V2xxREk3T2hQVUVsYlViOWZIdFAxMTBpeU02NFg4In0.eyJleHAiOjE3MzAxOTgxNzEsImlhdCI6MTczMDE5Nzg3MSwianRpIjoiNzJkZjA0NzktZjAxOC00M2VkLTg5NWQtMmE0MjIyNDIwOTQzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgxL3JlYWxtcy9tZW1jcnlwdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5ZjI5YzYzNi1lZmMyLTRiMWUtYTMwMC0xNzBkZGY0MmU1YzEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZW1jcnlwdC1mcm9udGVuZCIsInNpZCI6IjZiNWU0ZmQ0LWQzNGUtNDY4Ny1iZTdlLWJlNWQ3Yjk1OWNiZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9vYXV0aC5wc3Rtbi5pbyIsImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCIsImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMSJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1tZW1jcnlwdCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iLCJPUkdfQURNSU4iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm9yZ19pZCI6IjJiNThjZWVjLTY5MzMtNGEyNC05ZTYwLWFlODIzMDk0MjUzZiIsIm5hbWUiOiJhcnVuIGt1bWFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSIsImdpdmVuX25hbWUiOiJhcnVuIiwiZmFtaWx5X25hbWUiOiJrdW1hciIsImVtYWlsIjoiYXJ1bmt1bWFyQGRlbW9vcmc1NTU4LmNvbSJ9.LKCbJvdYgqzO0KgXoBbq2CsPXrWr-JvvteF67ymWD57mda26e0QL5vI8W0p38pLJUKeqjcHhfIWdeFEc6c66O_zJxRE96_ij4-tJkJ1booGoUVfsC6wwRpNnGExyNvDBLjBUVEmv9xExkToO-WMhsOsbbofW8q-oP03wiWf80lcXrFgJm4il7hhDXF0EuS3wy1_NqjzaQ0jE7Y5kOEl5Ta4SogjSVeVXSRsLpG-pz8y3ppj5ZTXx5rt7GGRd1GyaSrLR5uSccVqqGr19zUQbRx9gUIYZCzsMTtUQEYOAju5MB4tSa87uRU4Yfa9KCG2pgTNsqzra7ldqEzCM-Pwp2w",
            "Content-Type": "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          pre() {
            // Generate current date and time in ISO 8601 format
            let currentTimestamp = new Date().toISOString();

            // Set this value in an environment variable
            pm.environment.set("currentTimestamp", currentTimestamp);
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Fetching all Activity Logs", function() {
        postman[Request]({
          name: "Fetch all the activity logs in the org",
          id: "6f7525fd-3d7f-4c89-b8e3-5a4e4e75656a",
          method: "GET",
          address: "{{consoleUrl}}/console/v1.0/activity-logs",
          headers: {
            accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Fetch the activity logs based on device id",
          id: "cd78301b-2576-4559-a0aa-3b26d9efb0f9",
          method: "GET",
          address:
            "{{consoleUrl}}/console/v1.0/activity-logs/device/{{deviceID}}",
          headers: {
            accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });
    });

    group("File Recovery Copy", function() {
      group("Creating Recovery file records", function() {
        postman[Request]({
          name: "Create a file  recovery record against the device",
          id: "583ec844-6323-4501-876e-d7ad2fd9aad4",
          method: "POST",
          address: "{{consoleUrl}}/console/v1.0/file_recovery",
          data:
            '[{\n  "device_id": "{{deviceID}}",\n  "file_name": "test.exe",\n  "status": "Pending",\n  "recovery_method": "Shadow Copy",\n  "file_size": 1024\n}]',
          headers: {
            accept: "application/json",
            "Content-Type": "application/json",
            "X-Org-Key": "{{TenantId}}"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            var jsonData = pm.response.json();
            if (Array.isArray(jsonData) && jsonData.length > 0) {
              var responseRecoveryFileUniqueID = jsonData[0].id;
              pm.environment.set(
                "recoveryFileUniqueID",
                responseRecoveryFileUniqueID
              );
            }
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Update Recovery File Record", function() {
        postman[Request]({
          name: "Update the recovery file record",
          id: "de3016ca-2e46-4bfe-8597-62958e143d35",
          method: "PUT",
          address:
            "{{consoleUrl}}/console/v1.0/file-recovery/{{recoveryFileUniqueID}}",
          data:
            '{\n  "status": "In Progress",\n  "recovery_method": "Shadow Copy"\n}',
          headers: {
            accept: "application/json",
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Fetch Recovery File Records", function() {
        postman[Request]({
          name: "Fetch all the recovery files in the organization",
          id: "bb6df27b-30f1-430d-882a-66f0bd8a350f",
          method: "GET",
          address:
            "{{consoleUrl}}/console/v1.0/organization/devices/recoveries",
          headers: {
            accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });

        postman[Request]({
          name:
            "Fetch all the recovery files based on device id in the organization",
          id: "4cb208ce-924e-427b-bed6-7581b8f7096b",
          method: "GET",
          address:
            "{{consoleUrl}}/console/v1.0/device/{{deviceID}}/file_recovery",
          headers: {
            accept: "application/json"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "user_access_token"
            )}`;
          }
        });
      });

      group("Delete User and Organization after file recovery", function() {
        postman[Request]({
          name: "KeycloakAccessToken",
          id: "6190a5d5-7921-4ca7-8222-5fe5b3dbc891",
          method: "POST",
          address:
            "{{keycloak_url}}/realms/{{realm}}/protocol/openid-connect/token",
          data: {
            client_id: "{{keycloak_clientId}}",
            client_secret: "{{keycloak_secert}}",
            grant_type: "client_credentials"
          },
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          },
          post(response) {
            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });

            let jsonData = pm.response.json();

            if (jsonData.access_token) {
              pm.environment.set(
                "keycloak_access_token",
                jsonData.access_token
              );
              console.log("Access token:", jsonData.access_token);
            } else {
              console.log("Error retrieving access token:", jsonData);
            }
          }
        });

        postman[Request]({
          name: "Delete User After Approval",
          id: "f3ac2869-99e6-4a50-9316-d768251f4e11",
          method: "DELETE",
          address:
            "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
          headers: {
            "Content-Type": "application/json"
          },
          post(response) {
            pm.test("Status code is 204", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(204);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "keycloak_access_token"
            )}`;
          }
        });

        postman[Request]({
          name: "Delete Org after Approval",
          id: "e8a454ea-b55e-4b54-b104-0109448d19fd",
          method: "DELETE",
          address:
            "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
          post(response) {
            pm.test("Status code is 204", function() {
              const statusCode = pm.response.code;
              pm.expect(statusCode).to.eql(204);
            });
          },
          auth(config, Var) {
            config.headers.Authorization = `Bearer ${pm[Var](
              "keycloak_access_token"
            )}`;
          }
        });
      });
    });
  });
}
